/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LinkRowBlockLink".
 */
export type LinkRowBlockLink =
  | {
      icon:
        | 'AlertTriangle'
        | 'AlertOctagon'
        | 'AtSign'
        | 'Banknote'
        | 'BookMarked'
        | 'ChevronDown'
        | 'ChevronUp'
        | 'ChevronsUpDown'
        | 'Circle'
        | 'Clock'
        | 'ExternalLink'
        | 'File'
        | 'Facebook'
        | 'Github'
        | 'Gmail'
        | 'HelpCircle'
        | 'Image'
        | 'Inbox'
        | 'Instagram'
        | 'Languages'
        | 'Linkedin'
        | 'MapPin'
        | 'Megaphone'
        | 'Menu'
        | 'Telegram'
        | 'TikLogo'
        | 'Tiktok'
        | 'X';
      label: string;
      linkType?: ('external' | 'internal') | null;
      url?: string | null;
      page?: (string | null) | Page;
      id?: string | null;
    }[]
  | null;
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MainNavigationItem".
 */
export type MainNavigationItem = {
  type?: ('page' | 'topic') | null;
  pageConfig?: {
    page: string | Page;
  };
  topicConfig?: MainNavigationTopicConfig;
  id?: string | null;
}[];

export interface Config {
  collections: {
    users: User;
    pages: Page;
    media: Media;
    topics: Topic;
    'board-members': BoardMember;
    boards: Board;
    'committee-members': CommitteeMember;
    committees: Committee;
    news: News;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  globals: {
    footer: Footer;
    'landing-page': LandingPage;
    'main-navigation': MainNavigation;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  sub?: string | null;
  updatedAt: string;
  createdAt: string;
  enableAPIKey?: boolean | null;
  apiKey?: string | null;
  apiKeyIndex?: string | null;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  title: string;
  description: string;
  hideTableOfContents: boolean;
  content: {
    root: {
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      type: string;
      version: number;
    };
    [k: string]: unknown;
  };
  path?: string | null;
  topic?: {
    relationTo: 'topics';
    value: string | Topic;
  } | null;
  slug: string;
  hidden: boolean;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "topics".
 */
export interface Topic {
  id: string;
  title: string;
  slug: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "board-members".
 */
export interface BoardMember {
  id: string;
  guildYear:
    | '2024'
    | '2023'
    | '2022'
    | '2021'
    | '2020'
    | '2019'
    | '2018'
    | '2017'
    | '2016'
    | '2015'
    | '2014'
    | '2013'
    | '2012'
    | '2011'
    | '2010'
    | '2009'
    | '2008'
    | '2007'
    | '2006'
    | '2005'
    | '2004'
    | '2003'
    | '2002'
    | '2001'
    | '2000'
    | '1999'
    | '1998'
    | '1997'
    | '1996'
    | '1995'
    | '1994'
    | '1993'
    | '1992'
    | '1991'
    | '1990'
    | '1989'
    | '1988'
    | '1987'
    | '1986';
  photo?: (string | null) | Media;
  name: string;
  title: string;
  email: string;
  telegram: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "boards".
 */
export interface Board {
  id: string;
  year:
    | '2024'
    | '2023'
    | '2022'
    | '2021'
    | '2020'
    | '2019'
    | '2018'
    | '2017'
    | '2016'
    | '2015'
    | '2014'
    | '2013'
    | '2012'
    | '2011'
    | '2010'
    | '2009'
    | '2008'
    | '2007'
    | '2006'
    | '2005'
    | '2004'
    | '2003'
    | '2002'
    | '2001'
    | '2000'
    | '1999'
    | '1998'
    | '1997'
    | '1996'
    | '1995'
    | '1994'
    | '1993'
    | '1992'
    | '1991'
    | '1990'
    | '1989'
    | '1988'
    | '1987'
    | '1986';
  groupPhoto?: (string | null) | Media;
  boardMembers: {
    boardMember?: (string | null) | BoardMember;
    id?: string | null;
  }[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "committee-members".
 */
export interface CommitteeMember {
  id: string;
  guildYear:
    | '2024'
    | '2023'
    | '2022'
    | '2021'
    | '2020'
    | '2019'
    | '2018'
    | '2017'
    | '2016'
    | '2015'
    | '2014'
    | '2013'
    | '2012'
    | '2011'
    | '2010'
    | '2009'
    | '2008'
    | '2007'
    | '2006'
    | '2005'
    | '2004'
    | '2003'
    | '2002'
    | '2001'
    | '2000'
    | '1999'
    | '1998'
    | '1997'
    | '1996'
    | '1995'
    | '1994'
    | '1993'
    | '1992'
    | '1991'
    | '1990'
    | '1989'
    | '1988'
    | '1987'
    | '1986';
  photo?: (string | null) | Media;
  name: string;
  title: string;
  chair?: boolean | null;
  telegramUsername?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "committees".
 */
export interface Committee {
  id: string;
  year:
    | '2024'
    | '2023'
    | '2022'
    | '2021'
    | '2020'
    | '2019'
    | '2018'
    | '2017'
    | '2016'
    | '2015'
    | '2014'
    | '2013'
    | '2012'
    | '2011'
    | '2010'
    | '2009'
    | '2008'
    | '2007'
    | '2006'
    | '2005'
    | '2004'
    | '2003'
    | '2002'
    | '2001'
    | '2000'
    | '1999'
    | '1998'
    | '1997'
    | '1996'
    | '1995'
    | '1994'
    | '1993'
    | '1992'
    | '1991'
    | '1990'
    | '1989'
    | '1988'
    | '1987'
    | '1986';
  name: string;
  description: {
    root: {
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      type: string;
      version: number;
    };
    [k: string]: unknown;
  };
  committeeMembers: {
    committeeMember?: (string | null) | CommitteeMember;
    id?: string | null;
  }[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "news".
 */
export interface News {
  id: string;
  title: string;
  slug: string;
  excerpt: string;
  ctaType: 'none' | 'news' | 'page';
  pageLink?: (string | null) | Page;
  type?: ('announcement' | 'warning' | 'danger') | null;
  author: string | User;
  content: {
    root: {
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      type: string;
      version: number;
    };
    [k: string]: unknown;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: string;
  layout: (LinkRowBlock | SponsorLogoRowBlock)[];
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LinkRowBlock".
 */
export interface LinkRowBlock {
  showLabel: boolean;
  links?: LinkRowBlockLink;
  id?: string | null;
  blockName?: string | null;
  blockType: 'link-row';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SponsorLogoRowBlock".
 */
export interface SponsorLogoRowBlock {
  logos?:
    | {
        image: string | Media;
        link: string;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'logo-row';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "landing-page".
 */
export interface LandingPage {
  id: string;
  heroText: string;
  heroImages: {
    image?: (string | null) | Media;
    id?: string | null;
  }[];
  announcement?: (string | null) | News;
  body: {
    root: {
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      type: string;
      version: number;
    };
    [k: string]: unknown;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "main-navigation".
 */
export interface MainNavigation {
  id: string;
  items: MainNavigationItem;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MainNavigationTopicConfig".
 */
export interface MainNavigationTopicConfig {
  topic: string | Topic;
  categories?:
    | {
        title: string;
        pages?:
          | {
              page: string | Page;
              id?: string | null;
            }[]
          | null;
        externalLinks?:
          | {
              title: string;
              href: string;
              icon:
                | 'AlertTriangle'
                | 'AlertOctagon'
                | 'AtSign'
                | 'Banknote'
                | 'BookMarked'
                | 'ChevronDown'
                | 'ChevronUp'
                | 'ChevronsUpDown'
                | 'Circle'
                | 'Clock'
                | 'ExternalLink'
                | 'File'
                | 'Facebook'
                | 'Github'
                | 'Gmail'
                | 'HelpCircle'
                | 'Image'
                | 'Inbox'
                | 'Instagram'
                | 'Languages'
                | 'Linkedin'
                | 'MapPin'
                | 'Megaphone'
                | 'Menu'
                | 'Telegram'
                | 'TikLogo'
                | 'Tiktok'
                | 'X';
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
}
